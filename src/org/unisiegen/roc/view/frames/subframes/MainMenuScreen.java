/* 
 * Institute of Knowledge Based Systems and Knowledge Management,
 * Department of Electrical Engineering and Computer Science,
 * Faculty of Science and Technology, University of Siegen, Germany
 * Winter Semester 2015/16  Â© 2015-2016 | All right reserved for University of Siegen
 */
package org.unisiegen.roc.view.frames.subframes;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartPanel;
import org.unisiegen.roc.controller.MainController;
import org.unisiegen.roc.domain.Feedback;
import org.unisiegen.roc.exception.RocException;
import org.unisiegen.roc.graphs.PieChart;

/**
 * Provides user interface for the main menu of application.
 *
 * @author Pratik
 */
public class MainMenuScreen extends javax.swing.JInternalFrame {

    // <editor-fold desc="Constructors">
    /**
     * Creates new form MainMenuScreen
     */
    public MainMenuScreen() {
        super("Main Menu");
        control = new MainController();
        frameDecorationRemoval();
        initComponents();
        configureComponents();
    }

    // </editor-fold>
    // <editor-fold desc="NetBeans Auto Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainMenuPanel = new javax.swing.JPanel();
        activityStatusPanel = new javax.swing.JPanel();
        viewAllButton = new javax.swing.JButton();
        statusScrollPane = new javax.swing.JScrollPane();
        statusTable = new javax.swing.JTable();
        workOrderButton = new javax.swing.JButton();
        reportsButton = new javax.swing.JButton();
        updateWorkOrderButton = new javax.swing.JButton();
        pieChartPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(0, 51, 51));

        mainMenuPanel.setBackground(new java.awt.Color(0, 51, 51));
        mainMenuPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        activityStatusPanel.setBackground(new java.awt.Color(0, 51, 51));
        activityStatusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)), "Critical Work Orders", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        viewAllButton.setBackground(new java.awt.Color(0, 102, 0));
        viewAllButton.setForeground(new java.awt.Color(255, 255, 255));
        viewAllButton.setText("View All  >>");
        viewAllButton.setToolTipText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        statusTable.setBackground(new java.awt.Color(204, 204, 255));
        statusTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));
        statusTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        statusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "SL No.", "ID", "Subject"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        statusTable.setGridColor(new java.awt.Color(51, 51, 51));
        statusScrollPane.setViewportView(statusTable);
        if (statusTable.getColumnModel().getColumnCount() > 0) {
            statusTable.getColumnModel().getColumn(0).setResizable(false);
            statusTable.getColumnModel().getColumn(0).setPreferredWidth(15);
        }

        javax.swing.GroupLayout activityStatusPanelLayout = new javax.swing.GroupLayout(activityStatusPanel);
        activityStatusPanel.setLayout(activityStatusPanelLayout);
        activityStatusPanelLayout.setHorizontalGroup(
            activityStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, activityStatusPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewAllButton)
                .addContainerGap())
            .addGroup(activityStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, activityStatusPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        activityStatusPanelLayout.setVerticalGroup(
            activityStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, activityStatusPanelLayout.createSequentialGroup()
                .addGap(0, 132, Short.MAX_VALUE)
                .addComponent(viewAllButton))
            .addGroup(activityStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(activityStatusPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(statusScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(35, Short.MAX_VALUE)))
        );

        workOrderButton.setBackground(new java.awt.Color(0, 102, 0));
        workOrderButton.setForeground(new java.awt.Color(255, 255, 255));
        workOrderButton.setText("WORK ORDER");
        workOrderButton.setToolTipText("Work Order");
        workOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workOrderButtonActionPerformed(evt);
            }
        });

        reportsButton.setBackground(new java.awt.Color(0, 102, 0));
        reportsButton.setForeground(new java.awt.Color(255, 255, 255));
        reportsButton.setText("REPORTS");
        reportsButton.setToolTipText("Reports");
        reportsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsButtonActionPerformed(evt);
            }
        });

        updateWorkOrderButton.setBackground(new java.awt.Color(0, 102, 0));
        updateWorkOrderButton.setForeground(new java.awt.Color(255, 255, 255));
        updateWorkOrderButton.setText("UPDATE WORK ORDER");
        updateWorkOrderButton.setToolTipText("Update Order");
        updateWorkOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateWorkOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenuPanelLayout = new javax.swing.GroupLayout(mainMenuPanel);
        mainMenuPanel.setLayout(mainMenuPanelLayout);
        mainMenuPanelLayout.setHorizontalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activityStatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(workOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reportsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateWorkOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainMenuPanelLayout.setVerticalGroup(
            mainMenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(activityStatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(workOrderButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reportsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateWorkOrderButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pieChartPanel.setBackground(new java.awt.Color(0, 51, 51));
        pieChartPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        javax.swing.GroupLayout pieChartPanelLayout = new javax.swing.GroupLayout(pieChartPanel);
        pieChartPanel.setLayout(pieChartPanelLayout);
        pieChartPanelLayout.setHorizontalGroup(
            pieChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );
        pieChartPanelLayout.setVerticalGroup(
            pieChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pieChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pieChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainMenuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // </editor-fold>
    // <editor-fold desc="Events">

    /**
     * Work order button action event.
     * @param evt Action event
     */
    private void workOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workOrderButtonActionPerformed
        JDesktopPane desktopPane = this.getDesktopPane();
        if (desktopPane != null) {
            control.addFrameToPane(desktopPane, "WorkOrderScreen");
            this.dispose();
        }
    }//GEN-LAST:event_workOrderButtonActionPerformed

    /**
     * Report button action event.
     * @param evt Action event
     */
    private void reportsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsButtonActionPerformed
        JDesktopPane desktopPane = this.getDesktopPane();
        if (desktopPane != null) {
            control.addFrameToPane(desktopPane, "ReportScreen");
            this.dispose();
        }
    }//GEN-LAST:event_reportsButtonActionPerformed

    /**
     * Update button action event.
     * @param evt Action event
     */
    private void updateWorkOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWorkOrderButtonActionPerformed
        JDesktopPane desktopPane = this.getDesktopPane();
        if (desktopPane != null) {
            control.addFrameToPane(desktopPane, "UpdateWorkOrderScreen");
            this.dispose();
        }
    }//GEN-LAST:event_updateWorkOrderButtonActionPerformed

    /**
     * View all button action event.
     * @param evt Action event
     */
    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        JDesktopPane desktopPane = this.getDesktopPane();
        if (desktopPane != null) {
            try {
                control.moveToCriticalReports(desktopPane);
            } catch (RocException ex) {
                Logger.getLogger(MainMenuScreen.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
            this.dispose();
        }
    }//GEN-LAST:event_viewAllButtonActionPerformed

    // </editor-fold>
    // <editor-fold desc="Private Methods">
    /**
     * Method to remove unnecessary decoration from internal frame.
     */
    private void frameDecorationRemoval() {
        control.removeInternalFrameDecoration(this);
    }

    /**
     * Method to initialize components.
     */
    private void configureComponents() {
        setCriticalSummaryTable();
        createChart();
    }

    /**
     * Method to get critical work order details and summarize into table.
     */
    private void setCriticalSummaryTable() {
        try {
            List<Feedback> feedbackCollection = control.getCriticalFeedbackCollection();            
            if (feedbackCollection != null && !feedbackCollection.isEmpty()) {
                Object[] columnNames = {"Order No.", "Order ID", "Subject"};
                DefaultTableModel model = new DefaultTableModel(new Object[0][0], columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                long listSize = feedbackCollection.size() >= 7 ? 7 : feedbackCollection.size();
                feedbackCollection.stream().limit(listSize).map((Feedback feedbackItem) -> {
                    Object[] obj = new Object[3];
                    obj[0] = feedbackCollection.indexOf(feedbackItem) + 1;
                    obj[1] = feedbackItem.getFeedbackId();
                    obj[2] = feedbackItem.getSubject();
                    return obj;
                }).forEach((obj) -> {
                    model.addRow(obj);
                });
//            int listSize = feedbackCollection.size() >= 7 ? 7 : feedbackCollection.size();
//            int count = 1;
//            for(int i = 0;i < listSize;i++){
//                Feedback feedbackItem = feedbackCollection.get(i);
//                if(feedbackItem != null){
//                    Object[] obj = new Object[3];
//                    obj[0] = count++;
//                    obj[1] = feedbackItem.getFeedbackId();
//                    obj[2] = feedbackItem.getSubject();
//                    model.addRow(obj);
//                }
//            }

                statusTable.setModel(model);
            } else {
                statusScrollPane.setVisible(false);
                viewAllButton.setVisible(false);
                activityStatusPanel.setLayout(new BorderLayout());
                JLabel noCriticalOrderMessage = new JLabel("No Critical Work Orders to display!!");
                noCriticalOrderMessage.setFont(new java.awt.Font("Tahoma", Font.BOLD, 12));
                noCriticalOrderMessage.setForeground(Color.WHITE);
                activityStatusPanel.add(noCriticalOrderMessage, BorderLayout.CENTER);
            }
        } catch (RocException ex) {
            Logger.getLogger(MainMenuScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Method to create pie chart on main menu.
     */
    private void createChart() {
        PieChart chart = new PieChart();
        HashMap<String, Long> feedbackCountMap = null;
        try {
            feedbackCountMap = control.getFeedbackCollectionCountByPriority();
        } catch (RocException ex) {
            Logger.getLogger(MainMenuScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
        pieChartPanel.setLayout(new BorderLayout());
        if (feedbackCountMap != null && !feedbackCountMap.isEmpty()) {            
            pieChartPanel.add(new ChartPanel(chart.createChart(feedbackCountMap, "Overview of Work Order")), BorderLayout.CENTER);
        } else{
            JLabel noCriticalOrderMessage = new JLabel("No data to display!!");
            noCriticalOrderMessage.setFont(new java.awt.Font("Tahoma", Font.BOLD, 12));
            noCriticalOrderMessage.setForeground(Color.WHITE);
            pieChartPanel.add(noCriticalOrderMessage, BorderLayout.CENTER);
        }
    }

    // </editor-fold>
    private final MainController control;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel activityStatusPanel;
    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JPanel pieChartPanel;
    private javax.swing.JButton reportsButton;
    private javax.swing.JScrollPane statusScrollPane;
    private javax.swing.JTable statusTable;
    private javax.swing.JButton updateWorkOrderButton;
    private javax.swing.JButton viewAllButton;
    private javax.swing.JButton workOrderButton;
    // End of variables declaration//GEN-END:variables
}
