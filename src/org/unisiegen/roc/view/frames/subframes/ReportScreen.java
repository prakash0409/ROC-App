/* 
 * Institute of Knowledge Based Systems and Knowledge Management,
 * Department of Electrical Engineering and Computer Science,
 * Faculty of Science and Technology, University of Siegen, Germany
 * Winter Semester 2015/16  Â© 2015-2016 | All right reserved for University of Siegen
 */
package org.unisiegen.roc.view.frames.subframes;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import org.unisiegen.roc.controller.CustomComboItem;
import org.unisiegen.roc.controller.Filter;
import org.unisiegen.roc.controller.MainController;
import org.unisiegen.roc.domain.Feedback;
import org.unisiegen.roc.domain.Priority;
import org.unisiegen.roc.domain.ResolvingTeam;
import org.unisiegen.roc.domain.Status;
import org.unisiegen.roc.exception.RocException;

/**
 * Provide user interface for reporting functionality of application.
 *
 * @author Pratik
 */
public class ReportScreen extends javax.swing.JInternalFrame {

    // <editor-fold desc="Constructors">
    /**
     * Creates new form ReportScreen
     */
    public ReportScreen() {
        super("Reporting");
        control = new MainController();
        feedbackCollection = new ArrayList<>();
        frameDecorationRemoval();
        initComponents();
        configureComponents();
    }

    // </editor-fold>
    // <editor-fold desc="NetBeans Auto Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportPanel = new javax.swing.JPanel();
        filterPanel = new javax.swing.JPanel();
        priorityRadioButton = new javax.swing.JRadioButton();
        statusRadioButton = new javax.swing.JRadioButton();
        priorityBox = new javax.swing.JComboBox();
        statusBox = new javax.swing.JComboBox();
        teamRadioButton = new javax.swing.JRadioButton();
        teamBox = new javax.swing.JComboBox();
        searchPanel = new javax.swing.JPanel();
        searchtxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        reportGenPanel = new javax.swing.JPanel();
        reportGenerateButton = new javax.swing.JButton();
        pdfRadioButton = new javax.swing.JRadioButton();
        excelRadioButton = new javax.swing.JRadioButton();
        backButton = new javax.swing.JButton();
        formatBox = new javax.swing.JComboBox();
        timeFilterPanel = new javax.swing.JPanel();
        calendarRadioButton = new javax.swing.JRadioButton();
        periodRadioButton = new javax.swing.JRadioButton();
        periodBox = new javax.swing.JComboBox();
        fromDateChooser = new com.toedter.calendar.JDateChooser();
        calendarTotxt = new javax.swing.JLabel();
        toDateChooser = new com.toedter.calendar.JDateChooser();
        filterButton = new javax.swing.JButton();
        clearFilterButton = new javax.swing.JButton();
        reportResultPanel = new javax.swing.JPanel();
        reportResultScrollPane = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 51, 51));
        setMinimumSize(new java.awt.Dimension(716, 600));

        reportPanel.setBackground(new java.awt.Color(0, 51, 51));

        filterPanel.setBackground(new java.awt.Color(0, 51, 51));
        filterPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        priorityRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        priorityRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        priorityRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        priorityRadioButton.setText("Priority");

        statusRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        statusRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        statusRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        statusRadioButton.setText("Status");

        priorityBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        priorityBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        statusBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        teamRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        teamRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        teamRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        teamRadioButton.setText("Team Assigned");

        teamBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        teamBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamRadioButton)
                    .addComponent(priorityRadioButton)
                    .addComponent(statusRadioButton))
                .addGap(18, 18, 18)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(priorityBox, 0, 168, Short.MAX_VALUE)
                    .addComponent(statusBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teamBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priorityRadioButton)
                    .addComponent(priorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusRadioButton)
                    .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamRadioButton)
                    .addComponent(teamBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchPanel.setBackground(new java.awt.Color(0, 51, 51));
        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)), "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        searchtxt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchtxt.setText("Enter ID..");
        searchtxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchtxtMouseClicked(evt);
            }
        });
        searchtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchtxtKeyPressed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(0, 102, 0));
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("SEARCH BY ID");
        searchButton.setToolTipText("Search ID");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchtxt)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reportGenPanel.setBackground(new java.awt.Color(0, 51, 51));
        reportGenPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        reportGenerateButton.setBackground(new java.awt.Color(0, 102, 0));
        reportGenerateButton.setForeground(new java.awt.Color(255, 255, 255));
        reportGenerateButton.setText("GENERATE REPORT");
        reportGenerateButton.setToolTipText("Generate Report");
        reportGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportGenerateButtonActionPerformed(evt);
            }
        });

        pdfRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        pdfRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        pdfRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        pdfRadioButton.setText("PDF");

        excelRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        excelRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        excelRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        excelRadioButton.setText("EXCEL");

        backButton.setBackground(new java.awt.Color(0, 102, 0));
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("BACK");
        backButton.setToolTipText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        formatBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        formatBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout reportGenPanelLayout = new javax.swing.GroupLayout(reportGenPanel);
        reportGenPanel.setLayout(reportGenPanelLayout);
        reportGenPanelLayout.setHorizontalGroup(
            reportGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportGenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reportGenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pdfRadioButton)
                .addGap(18, 18, 18)
                .addComponent(excelRadioButton)
                .addGap(18, 18, 18)
                .addComponent(formatBox, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reportGenPanelLayout.setVerticalGroup(
            reportGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportGenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportGenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfRadioButton)
                    .addComponent(excelRadioButton)
                    .addComponent(backButton)
                    .addComponent(reportGenerateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        timeFilterPanel.setBackground(new java.awt.Color(0, 51, 51));
        timeFilterPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        calendarRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        calendarRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        calendarRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        calendarRadioButton.setText("From");

        periodRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        periodRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        periodRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        periodRadioButton.setText("Period of time");

        periodBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        periodBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        fromDateChooser.setDateFormatString("dd/MM/yyyy");
        fromDateChooser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        calendarTotxt.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        calendarTotxt.setForeground(new java.awt.Color(255, 255, 255));
        calendarTotxt.setText("to");

        toDateChooser.setDateFormatString("dd/MM/yyyy");
        toDateChooser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout timeFilterPanelLayout = new javax.swing.GroupLayout(timeFilterPanel);
        timeFilterPanel.setLayout(timeFilterPanelLayout);
        timeFilterPanelLayout.setHorizontalGroup(
            timeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timeFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calendarRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calendarTotxt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(periodRadioButton)
                .addGap(18, 18, 18)
                .addComponent(periodBox, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        timeFilterPanelLayout.setVerticalGroup(
            timeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timeFilterPanelLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(timeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fromDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calendarRadioButton)
                    .addGroup(timeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(periodBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(periodRadioButton))
                    .addGroup(timeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(calendarTotxt)
                        .addComponent(toDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        filterButton.setBackground(new java.awt.Color(0, 102, 0));
        filterButton.setForeground(new java.awt.Color(255, 255, 255));
        filterButton.setText("Apply Filters");
        filterButton.setToolTipText("Apply Filters");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        clearFilterButton.setBackground(new java.awt.Color(0, 102, 0));
        clearFilterButton.setForeground(new java.awt.Color(255, 255, 255));
        clearFilterButton.setText("Clear Filters");
        clearFilterButton.setToolTipText("Clear Filters");
        clearFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterButtonActionPerformed(evt);
            }
        });

        reportResultPanel.setBackground(new java.awt.Color(0, 51, 51));
        reportResultPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        reportTable.setBackground(new java.awt.Color(204, 204, 255));
        reportTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));
        reportTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "ID", "Subject", "Priority", "Team Assigned", "Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportTable.setGridColor(new java.awt.Color(51, 51, 51));
        reportResultScrollPane.setViewportView(reportTable);

        javax.swing.GroupLayout reportResultPanelLayout = new javax.swing.GroupLayout(reportResultPanel);
        reportResultPanel.setLayout(reportResultPanelLayout);
        reportResultPanelLayout.setHorizontalGroup(
            reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reportResultPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(reportResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        reportResultPanelLayout.setVerticalGroup(
            reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reportResultPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(reportResultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearFilterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, reportPanelLayout.createSequentialGroup()
                        .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(reportResultPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reportGenPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, reportPanelLayout.createSequentialGroup()
                                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(reportPanelLayout.createSequentialGroup()
                                        .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(timeFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(timeFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterButton)
                    .addComponent(clearFilterButton))
                .addGap(11, 11, 11)
                .addComponent(reportResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportGenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // </editor-fold>
    // <editor-fold desc="Events">
    /**
     * Back button action event.
     *
     * @param evt Action event
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        JDesktopPane desktopPane = this.getDesktopPane();
        if (desktopPane != null) {
            control.addFrameToPane(desktopPane, "MainMenuScreen");
            this.dispose();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * Search text field mouse click event.
     *
     * @param evt Mouse Event
     */
    private void searchtxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchtxtMouseClicked
        searchtxt.setText("");
    }//GEN-LAST:event_searchtxtMouseClicked

    /**
     * Search button action event.
     *
     * @param evt Action event
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchForID();
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Filter button action event.
     *
     * @param evt Action event
     */
    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        if (priorityRadioButton.isSelected() || statusRadioButton.isSelected() || calendarRadioButton.isSelected() || periodRadioButton.isSelected() || teamRadioButton.isSelected()) {
            Filter filterItem = new Filter();
            Priority priorityInfo;
            if (priorityRadioButton.isSelected()) {
                CustomComboItem priorityItem = (CustomComboItem) priorityBox.getSelectedItem();
                if (priorityItem != null) {
                    priorityInfo = new Priority();
                    priorityInfo.setPriorityId(priorityItem.getValue());
                    priorityInfo.setPriorityName(priorityItem.getKey());
                    filterItem.setPriorityFilter(priorityInfo);
                }
            }

            Status statusInfo;
            if (statusRadioButton.isSelected()) {
                CustomComboItem statusItem = (CustomComboItem) statusBox.getSelectedItem();
                if (statusItem != null) {
                    statusInfo = new Status();
                    statusInfo.setStatusId(statusItem.getValue());
                    statusInfo.setStatusDescription(statusItem.getKey());
                    filterItem.setStatusFilter(statusInfo);
                }
            }

            ResolvingTeam teamInfo;
            if (teamRadioButton.isSelected()) {
                CustomComboItem teamItem = (CustomComboItem) teamBox.getSelectedItem();
                if (teamItem != null) {
                    teamInfo = new ResolvingTeam();
                    teamInfo.setTeamId(teamItem.getValue());
                    teamInfo.setTeamDescription(teamItem.getKey());
                    filterItem.setTeamFilter(teamInfo);
                }
            }

            Date fromDate;
            Date toDate;
            if (calendarRadioButton.isSelected()) {
                fromDate = fromDateChooser.getDate();
                filterItem.setStartDateFilter(fromDate);
                toDate = toDateChooser.getDate();
                filterItem.setEndDateFilter(toDate);
            }

            int periodId = 0;
            if (periodRadioButton.isSelected()) {
                CustomComboItem periodItem = (CustomComboItem) periodBox.getSelectedItem();
                if (periodItem != null) {
                    periodId = periodItem.getValue();
                    filterItem.setPeriodFilter(periodId);
                }
            }

            try {
                feedbackCollection = control.populateTable(reportTable, "Filter", filterItem);
            } catch (RocException ex) {
                Logger.getLogger(ReportScreen.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
            if (feedbackCollection != null && feedbackCollection.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No results to display for the selected filters, please try again..", "RoC Message", JOptionPane.INFORMATION_MESSAGE);
                this.configureComponents();
                this.priorityRadioButton.setSelected(false);
                this.statusRadioButton.setSelected(false);
                this.teamRadioButton.setSelected(false);
                this.calendarRadioButton.setSelected(false);
                this.periodRadioButton.setSelected(false);
            } else {
                reportTable.setVisible(true);
                reportResultScrollPane.setVisible(true);
                for (int i = 0; i < reportResultPanel.getComponentCount(); i++) {
                    if (reportResultPanel.getComponent(i).getClass() == JLabel.class) {
                        reportResultPanel.remove(i);
                    }
                }
                reportTable.setPreferredScrollableViewportSize(reportTable.getPreferredSize());
                reportTable.setFillsViewportHeight(true);
                reportResultScrollPane.getViewport().add(reportTable);
                reportResultScrollPane.revalidate();
                reportResultScrollPane.repaint();
                reportResultPanel.setLayout(new BorderLayout());
                reportResultPanel.add(reportResultScrollPane, BorderLayout.CENTER);                               
                reportResultPanel.revalidate();
                reportResultPanel.repaint();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select one of the filters and try again..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    /**
     * Clear filter action event.
     *
     * @param evt Action event
     */
    private void clearFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterButtonActionPerformed
        this.configureComponents();
        this.priorityRadioButton.setSelected(false);
        this.statusRadioButton.setSelected(false);
        this.teamRadioButton.setSelected(false);
        this.calendarRadioButton.setSelected(false);
        this.periodRadioButton.setSelected(false);
    }//GEN-LAST:event_clearFilterButtonActionPerformed

    /**
     * Generate report action event.
     *
     * @param evt Action event
     */
    private void reportGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportGenerateButtonActionPerformed
        if (!pdfRadioButton.isSelected() && !excelRadioButton.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select format and try again..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        } else {
            String format = getReportFormat();
            List<Feedback> feedbacksForReport = getFeedbackListForReport();
            try {
                if (feedbacksForReport != null && !feedbacksForReport.isEmpty()) {
                    if (pdfRadioButton.isSelected()) {
                        control.generatePDFReport(feedbacksForReport, format);
                    } else {
                        control.generateExcelReport(feedbacksForReport, format);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No work orders available to generate report!!", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                }
            } catch (RocException ex) {
                Logger.getLogger(ReportScreen.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_reportGenerateButtonActionPerformed

    /**
     * Search text key press event.
     *
     * @param evt Key event
     */
    private void searchtxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchtxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchForID();
        }
    }//GEN-LAST:event_searchtxtKeyPressed

    // </editor-fold>
    // <editor-fold desc="Private Methods">
    /**
     * Method to remove unnecessary decoration from internal frame.
     */
    private void frameDecorationRemoval() {
        control.removeInternalFrameDecoration(this);
    }

    /**
     * Method to initialize components.
     */
    private void configureComponents() {
        searchtxt.setText("Enter ID.. ");
        fromDateChooser.setMaxSelectableDate(new Date());
        toDateChooser.setMaxSelectableDate(new Date());
        try {
            control.populateDropDown(priorityBox, "PriorityBox");
            control.populateDropDown(statusBox, "StatusBox");
            control.populateDropDown(teamBox, "TeamBox");
            ButtonGroup timeGroup = new ButtonGroup();
            timeGroup.add(calendarRadioButton);
            timeGroup.add(periodRadioButton);
            ButtonGroup reportGroup = new ButtonGroup();
            reportGroup.add(pdfRadioButton);
            reportGroup.add(excelRadioButton);
            control.populateDropDown(periodBox, "PeriodBox");
            control.populateDropDown(formatBox, "ReportBox");
            feedbackCollection = control.populateTable(reportTable, "Update", null);
            if (feedbackCollection == null || (feedbackCollection != null && feedbackCollection.isEmpty())) {
                reportTable.setVisible(false);
                reportResultScrollPane.setVisible(false);
                reportResultPanel.setLayout(new BorderLayout());
                JLabel noCriticalOrderMessage = new JLabel("No Work Orders to display!!");
                noCriticalOrderMessage.setFont(new java.awt.Font("Tahoma", Font.BOLD, 12));
                noCriticalOrderMessage.setForeground(Color.WHITE);
                reportResultPanel.add(noCriticalOrderMessage, BorderLayout.CENTER);
            }
        } catch (RocException ex) {
            Logger.getLogger(ReportScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Method to get the format of report.
     *
     * @return Report format
     */
    private String getReportFormat() {
        String format = "";
        CustomComboItem formatItem = (CustomComboItem) formatBox.getSelectedItem();
        if (formatItem != null) {
            switch (formatItem.getValue()) {
                case 1:
                    format = "NonDetailed";
                    break;

                case 2:
                    format = "Detailed";
                    break;
            }
        }

        return format;
    }

    /**
     * Method to get feedback list for reporting.
     *
     * @return List of feedback
     */
    private List<Feedback> getFeedbackListForReport() {
        List<Feedback> feedbackReport = new ArrayList<>();
        TableModel model = reportTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(Boolean.TRUE) && feedbackCollection != null && !feedbackCollection.isEmpty()) {
                for (Feedback item : feedbackCollection) {
                    if (item.getFeedbackId() == Long.parseLong(model.getValueAt(i, 1).toString())) {
                        feedbackReport.add(item);
                        break;
                    }
                }
            }
        }

        return (!feedbackReport.isEmpty()) ? feedbackReport : feedbackCollection;
    }

    /**
     * Method to search feedback through Order ID.
     *
     * @throws NumberFormatException
     * @throws HeadlessException
     */
    private void searchForID() throws NumberFormatException, HeadlessException {
        try {
            String search = searchtxt.getText();
            if (search != null && !search.isEmpty()) {
                if (control.verifyInput(search, "Search")) {
                    try {
                        if (!(control.searchFeedbackDetailsById(Long.parseLong(search), reportTable))) {
                            JOptionPane.showMessageDialog(this, "ID - " + search + " not found!!\nPlease try again..", "RoC Message", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (RocException ex) {
                        Logger.getLogger(ReportScreen.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter valid search ID of only digits (max 10 digits) and try again..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter search ID and try again..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException | HeadlessException ex) {
            Logger.getLogger(ReportScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    // </editor-fold>
    // <editor-fold desc="Public Methods">
    /**
     * Method to initialize report screen for critical feedbacks.
     *
     * @param item
     */
    public void configureForCriticalReport(CustomComboItem item) {
        priorityRadioButton.setSelected(true);
        if (item != null) {
            priorityBox.setSelectedItem(item);
        }
        try {
            feedbackCollection = control.populateTable(reportTable, "Critical", null);
        } catch (RocException ex) {
            Logger.getLogger(ReportScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    // </editor-fold>

    private List<Feedback> feedbackCollection;
    private final MainController control;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JRadioButton calendarRadioButton;
    private javax.swing.JLabel calendarTotxt;
    private javax.swing.JButton clearFilterButton;
    private javax.swing.JRadioButton excelRadioButton;
    private javax.swing.JButton filterButton;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JComboBox formatBox;
    private com.toedter.calendar.JDateChooser fromDateChooser;
    private javax.swing.JRadioButton pdfRadioButton;
    private javax.swing.JComboBox periodBox;
    private javax.swing.JRadioButton periodRadioButton;
    private javax.swing.JComboBox priorityBox;
    private javax.swing.JRadioButton priorityRadioButton;
    private javax.swing.JPanel reportGenPanel;
    private javax.swing.JButton reportGenerateButton;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JPanel reportResultPanel;
    private javax.swing.JScrollPane reportResultScrollPane;
    private javax.swing.JTable reportTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchtxt;
    private javax.swing.JComboBox statusBox;
    private javax.swing.JRadioButton statusRadioButton;
    private javax.swing.JComboBox teamBox;
    private javax.swing.JRadioButton teamRadioButton;
    private javax.swing.JPanel timeFilterPanel;
    private com.toedter.calendar.JDateChooser toDateChooser;
    // End of variables declaration//GEN-END:variables
}
