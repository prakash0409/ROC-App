/* 
 * Institute of Knowledge Based Systems and Knowledge Management,
 * Department of Electrical Engineering and Computer Science,
 * Faculty of Science and Technology, University of Siegen, Germany
 * Winter Semester 2015/16  Â© 2015-2016 | All right reserved for University of Siegen
 */
package org.unisiegen.roc.view.frames.subframes;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneLayout;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import org.unisiegen.roc.controller.CustomComboItem;
import org.unisiegen.roc.controller.Filter;
import org.unisiegen.roc.controller.MainController;
import org.unisiegen.roc.domain.Feedback;
import org.unisiegen.roc.domain.Priority;
import org.unisiegen.roc.domain.ResolvingTeam;
import org.unisiegen.roc.domain.Status;
import org.unisiegen.roc.exception.RocException;

/**
 * Provides user interface for updating previous work order of application.
 *
 * @author Pratik
 */
public class UpdateWorkOrderScreen extends javax.swing.JInternalFrame {

    // <editor-fold desc="Constructors">
    /**
     * Creates new form UpdateWorkOrderScreen
     */
    public UpdateWorkOrderScreen() {
        super("Update Work Order");
        control = new MainController();
        feedbackCollection = new ArrayList<>();
        frameDecorationRemoval();
        initComponents();
        configureComponents();
    }

    // </editor-fold>
    // <editor-fold desc="NetBeans Auto Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updatePanel = new javax.swing.JPanel();
        filterPanel = new javax.swing.JPanel();
        priorityRadioButton = new javax.swing.JRadioButton();
        statusRadioButton = new javax.swing.JRadioButton();
        priorityBox = new javax.swing.JComboBox();
        statusBox = new javax.swing.JComboBox();
        teamRadioButton = new javax.swing.JRadioButton();
        teamBox = new javax.swing.JComboBox();
        filterButton = new javax.swing.JButton();
        clearFilterButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchtxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        flowPanel = new javax.swing.JPanel();
        updateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        viewDetailsButton = new javax.swing.JButton();
        reportResultPanel = new javax.swing.JPanel();
        reportResultScrollPane = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 51, 51));

        updatePanel.setBackground(new java.awt.Color(0, 51, 51));
        updatePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        filterPanel.setBackground(new java.awt.Color(0, 51, 51));
        filterPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        priorityRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        priorityRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        priorityRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        priorityRadioButton.setText("Priority");

        statusRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        statusRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        statusRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        statusRadioButton.setText("Status");

        priorityBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        priorityBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        statusBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        teamRadioButton.setBackground(new java.awt.Color(0, 51, 51));
        teamRadioButton.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        teamRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        teamRadioButton.setText("Team Assigned");

        teamBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        teamBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        filterButton.setBackground(new java.awt.Color(0, 102, 0));
        filterButton.setForeground(new java.awt.Color(255, 255, 255));
        filterButton.setText("Apply Filters");
        filterButton.setToolTipText("Apply Filters");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        clearFilterButton.setBackground(new java.awt.Color(0, 102, 0));
        clearFilterButton.setForeground(new java.awt.Color(255, 255, 255));
        clearFilterButton.setText("Clear Filters");
        clearFilterButton.setToolTipText("Clear Filters");
        clearFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusRadioButton)
                            .addComponent(priorityRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(statusBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priorityBox, 0, 174, Short.MAX_VALUE)))
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addComponent(teamRadioButton)
                        .addGap(18, 18, 18)
                        .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filterPanelLayout.createSequentialGroup()
                                .addComponent(filterButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                .addComponent(clearFilterButton))
                            .addGroup(filterPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(teamBox, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priorityRadioButton)
                    .addComponent(priorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusRadioButton)
                    .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamRadioButton)
                    .addComponent(teamBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterButton)
                    .addComponent(clearFilterButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchPanel.setBackground(new java.awt.Color(0, 51, 51));
        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)), "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        searchtxt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchtxt.setText("Enter ID..");
        searchtxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchtxtMouseClicked(evt);
            }
        });
        searchtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchtxtKeyPressed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(0, 102, 0));
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("SEARCH BY ID");
        searchButton.setToolTipText("Search ID");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchtxt))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        flowPanel.setBackground(new java.awt.Color(0, 51, 51));
        flowPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        updateButton.setBackground(new java.awt.Color(0, 102, 0));
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("UPDATE");
        updateButton.setToolTipText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(0, 102, 0));
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("BACK");
        backButton.setToolTipText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        viewDetailsButton.setBackground(new java.awt.Color(0, 102, 0));
        viewDetailsButton.setForeground(new java.awt.Color(255, 255, 255));
        viewDetailsButton.setText("VIEW DETAILS");
        viewDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout flowPanelLayout = new javax.swing.GroupLayout(flowPanel);
        flowPanel.setLayout(flowPanelLayout);
        flowPanelLayout.setHorizontalGroup(
            flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flowPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(viewDetailsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        flowPanelLayout.setVerticalGroup(
            flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flowPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(backButton)
                    .addComponent(viewDetailsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reportResultPanel.setBackground(new java.awt.Color(0, 51, 51));
        reportResultPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));

        reportTable.setBackground(new java.awt.Color(204, 204, 255));
        reportTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)));
        reportTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "ID", "Subject", "Priority", "Team Assigned", "Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportTable.setGridColor(new java.awt.Color(51, 51, 51));
        reportResultScrollPane.setViewportView(reportTable);

        javax.swing.GroupLayout reportResultPanelLayout = new javax.swing.GroupLayout(reportResultPanel);
        reportResultPanel.setLayout(reportResultPanelLayout);
        reportResultPanelLayout.setHorizontalGroup(
            reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reportResultPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(reportResultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 704, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        reportResultPanelLayout.setVerticalGroup(
            reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 265, Short.MAX_VALUE)
            .addGroup(reportResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(reportResultPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(reportResultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout updatePanelLayout = new javax.swing.GroupLayout(updatePanel);
        updatePanel.setLayout(updatePanelLayout);
        updatePanelLayout.setHorizontalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updatePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addComponent(flowPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reportResultPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        updatePanelLayout.setVerticalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reportResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(flowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // </editor-fold>
    // <editor-fold desc="Events">
    /**
     * Back button action event.
     *
     * @param evt Action event
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        JDesktopPane desktopPane = this.getDesktopPane();
        if (desktopPane != null) {
            control.addFrameToPane(desktopPane, "MainMenuScreen");
            this.dispose();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * Filter button action event.
     *
     * @param evt Action event
     */
    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        if (priorityRadioButton.isSelected() || statusRadioButton.isSelected() || teamRadioButton.isSelected()) {
            Filter filterItem = new Filter();
            Priority priorityInfo;
            if (priorityRadioButton.isSelected()) {
                CustomComboItem priorityItem = (CustomComboItem) priorityBox.getSelectedItem();
                if (priorityItem != null) {
                    priorityInfo = new Priority();
                    priorityInfo.setPriorityId(priorityItem.getValue());
                    priorityInfo.setPriorityName(priorityItem.getKey());
                    filterItem.setPriorityFilter(priorityInfo);
                }
            }

            Status statusInfo;
            if (statusRadioButton.isSelected()) {
                CustomComboItem statusItem = (CustomComboItem) statusBox.getSelectedItem();
                if (statusItem != null) {
                    statusInfo = new Status();
                    statusInfo.setStatusId(statusItem.getValue());
                    statusInfo.setStatusDescription(statusItem.getKey());
                    filterItem.setStatusFilter(statusInfo);
                }
            }

            ResolvingTeam teamInfo;
            if (teamRadioButton.isSelected()) {
                CustomComboItem teamItem = (CustomComboItem) teamBox.getSelectedItem();
                if (teamItem != null) {
                    teamInfo = new ResolvingTeam();
                    teamInfo.setTeamId(teamItem.getValue());
                    teamInfo.setTeamDescription(teamItem.getKey());
                    filterItem.setTeamFilter(teamInfo);
                }
            }

            try {
                feedbackCollection = control.populateTable(reportTable, "Filter", filterItem);
            } catch (RocException ex) {
                Logger.getLogger(UpdateWorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
            if (feedbackCollection != null && feedbackCollection.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No results to display for the selected filters, please try again..", "RoC Message", JOptionPane.INFORMATION_MESSAGE);
                this.configureComponents();
                this.priorityRadioButton.setSelected(false);
                this.statusRadioButton.setSelected(false);
                this.teamRadioButton.setSelected(false);
            } else {
                reportTable.setVisible(true);
                reportResultScrollPane.setVisible(true);
                for(int i = 0;i < reportResultPanel.getComponentCount();i++){
                    if(reportResultPanel.getComponent(i).getClass() == JLabel.class){
                        reportResultPanel.remove(i);
                    }
                }   
                reportTable.setPreferredScrollableViewportSize(reportTable.getPreferredSize());
                reportTable.setFillsViewportHeight(true);
                reportResultScrollPane.getViewport().add(reportTable);
                reportResultScrollPane.revalidate();
                reportResultScrollPane.repaint();
                reportResultPanel.setLayout(new BorderLayout());
                reportResultPanel.add(reportResultScrollPane, BorderLayout.CENTER);                               
                reportResultPanel.revalidate();
                reportResultPanel.repaint();                
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select one of the filters and try again..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    /**
     * Search text field mouse click event.
     *
     * @param evt Mouse event
     */
    private void searchtxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchtxtMouseClicked
        searchtxt.setText("");
    }//GEN-LAST:event_searchtxtMouseClicked

    /**
     * Search button action event.
     *
     * @param evt Action event
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchForID();
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Update button action event.
     *
     * @param evt Action event
     */
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        updateScreenAction("Update");
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * Clear filter action event.
     *
     * @param evt Action event
     */
    private void clearFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterButtonActionPerformed
        this.configureComponents();
        this.priorityRadioButton.setSelected(false);
        this.statusRadioButton.setSelected(false);
        this.teamRadioButton.setSelected(false);
    }//GEN-LAST:event_clearFilterButtonActionPerformed

    /**
     * Search Text key press event.
     *
     * @param evt Key event
     */
    private void searchtxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchtxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchForID();
        }
    }//GEN-LAST:event_searchtxtKeyPressed

    /**
     * View details button action event.
     * @param evt Action event
     */
    private void viewDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsButtonActionPerformed
        updateScreenAction("View");
    }//GEN-LAST:event_viewDetailsButtonActionPerformed

    // </editor-fold>
    // <editor-fold desc="Private Methods">
    /**
     * Method to remove unnecessary decoration from internal frame.
     */
    private void frameDecorationRemoval() {
        control.removeInternalFrameDecoration(this);
    }

    /**
     * Method to initialize components.
     */
    private void configureComponents() {
        try {
            searchtxt.setText("Enter ID..");
            control.populateDropDown(priorityBox, "PriorityBox");
            control.populateDropDown(statusBox, "StatusBox");
            control.populateDropDown(teamBox, "TeamBox");
            feedbackCollection = control.populateTable(reportTable, "Update", null);
            if(feedbackCollection == null || (feedbackCollection != null && feedbackCollection.isEmpty())){
                reportTable.setVisible(false);
                reportResultScrollPane.setVisible(false);
                reportResultPanel.setLayout(new BorderLayout());
                JLabel noCriticalOrderMessage = new JLabel("No Work Orders to display!!");
                noCriticalOrderMessage.setFont(new java.awt.Font("Tahoma", Font.BOLD, 12));
                noCriticalOrderMessage.setForeground(Color.WHITE);
                reportResultPanel.add(noCriticalOrderMessage, BorderLayout.CENTER);
            }
        } catch (RocException ex) {
            Logger.getLogger(UpdateWorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Method to search for feedback through order ID.
     *
     * @throws NumberFormatException
     * @throws HeadlessException
     */
    private void searchForID() throws NumberFormatException, HeadlessException {
        try {
            String search = searchtxt.getText();
            if (search != null && !search.isEmpty()) {
                if (control.verifyInput(search, "Search")) {
                    try {
                        if (!(control.searchFeedbackDetailsById(Long.parseLong(search), reportTable))) {
                            JOptionPane.showMessageDialog(this, "ID - " + search + " not found!!\nPlease try again..", "RoC Message", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (RocException ex) {
                        Logger.getLogger(UpdateWorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter valid search ID of only digits (max 10 digits) and try again..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter search ID and try again..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException | HeadlessException ex) {
            Logger.getLogger(UpdateWorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Method to provide appropriate update screen action.
     * @param actionCase Action case
     * @throws NumberFormatException
     * @throws HeadlessException 
     */
    private void updateScreenAction(String actionCase) throws NumberFormatException, HeadlessException {
        try {
            TableModel model = reportTable.getModel();
            Feedback feedbackInfo = null;
            boolean isChecked = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).equals(Boolean.TRUE) && feedbackCollection != null && !feedbackCollection.isEmpty()) {
                    for (Feedback item : feedbackCollection) {
                        if (item.getFeedbackId() == Long.parseLong(model.getValueAt(i, 1).toString())) {
                            feedbackInfo = item;
                            isChecked = true;
                            break;
                        }
                    }
                    if (isChecked) {
                        break;
                    }
                }
            }

            int selectionCount = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).equals(Boolean.TRUE)) {
                    selectionCount++;
                    if (selectionCount > 1) {
                        break;
                    }
                }
            }
            if (isChecked && selectionCount != 0) {
                if (selectionCount > 1) {                    
                    JOptionPane.showMessageDialog(this,
                            "Due to multiple order selection, you will be redirected to update the first selected order!!\nOnly ONE order can be updated at once.",
                            "RoC Message", JOptionPane.INFORMATION_MESSAGE);
                }
                JDesktopPane desktopPane = this.getDesktopPane();
                if (desktopPane != null && feedbackInfo != null && actionCase != null && !actionCase.isEmpty()) {
                    switch (actionCase) {
                        case "Update":
                            control.moveToOrderUpdate(desktopPane, feedbackInfo);
                            break;
                        case "View":
                            control.moveToOrderView(desktopPane, feedbackInfo);
                            break;

                    }
                    this.dispose();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select record from table!!", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException | HeadlessException ex) {
            Logger.getLogger(UpdateWorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    // </editor-fold>

    private List<Feedback> feedbackCollection;
    private final MainController control;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearFilterButton;
    private javax.swing.JButton filterButton;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JPanel flowPanel;
    private javax.swing.JComboBox priorityBox;
    private javax.swing.JRadioButton priorityRadioButton;
    private javax.swing.JPanel reportResultPanel;
    private javax.swing.JScrollPane reportResultScrollPane;
    private javax.swing.JTable reportTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchtxt;
    private javax.swing.JComboBox statusBox;
    private javax.swing.JRadioButton statusRadioButton;
    private javax.swing.JComboBox teamBox;
    private javax.swing.JRadioButton teamRadioButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JPanel updatePanel;
    private javax.swing.JButton viewDetailsButton;
    // End of variables declaration//GEN-END:variables
}
