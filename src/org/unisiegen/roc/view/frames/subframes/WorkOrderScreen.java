/* 
 * Institute of Knowledge Based Systems and Knowledge Management,
 * Department of Electrical Engineering and Computer Science,
 * Faculty of Science and Technology, University of Siegen, Germany
 * Winter Semester 2015/16  Â© 2015-2016 | All right reserved for University of Siegen
 */
package org.unisiegen.roc.view.frames.subframes;

import java.awt.Image;
import java.util.List;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DefaultStyledDocument;
import org.unisiegen.roc.controller.CustomComboItem;
import org.unisiegen.roc.controller.DocumentSizeFilter;
import org.unisiegen.roc.controller.MainController;
import org.unisiegen.roc.domain.Customer;
import org.unisiegen.roc.domain.Feedback;
import org.unisiegen.roc.domain.Issue;
import org.unisiegen.roc.domain.Model;
import org.unisiegen.roc.domain.Priority;
import org.unisiegen.roc.domain.Product;
import org.unisiegen.roc.domain.ResolvingTeam;
import org.unisiegen.roc.domain.Status;
import org.unisiegen.roc.domain.User;
import org.unisiegen.roc.exception.RocException;

/**
 * Provides user interface for work order form filling process of application.
 *
 * @author Pratik
 */
public class WorkOrderScreen extends javax.swing.JInternalFrame {

    // <editor-fold desc="Constructors">
    /**
     * Creates new form WorkOrderScreen
     */
    public WorkOrderScreen() {
        super("Work Order");
        control = new MainController();
        frameDecorationRemoval();
        initComponents();
        loadWorkOrderConponents();
    }

    // </editor-fold>
    // <editor-fold desc="NetBeans Auto Generated Code">
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workOrderPane = new javax.swing.JScrollPane();
        workOrderPanel = new javax.swing.JPanel();
        companyInfoPanel = new javax.swing.JPanel();
        companyNameLabel = new javax.swing.JLabel();
        companyNameText = new javax.swing.JTextField();
        contactLabel = new javax.swing.JLabel();
        contactText = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        emailText = new javax.swing.JTextField();
        phoneLabel = new javax.swing.JLabel();
        phoneText = new javax.swing.JTextField();
        emailInfoIcon = new javax.swing.JLabel();
        phoneInfoIcon = new javax.swing.JLabel();
        productInfoPanel = new javax.swing.JPanel();
        productNameLabel = new javax.swing.JLabel();
        modelNumberLabel = new javax.swing.JLabel();
        productNameBox = new javax.swing.JComboBox();
        modelNumberBox = new javax.swing.JComboBox();
        prdInfoIcon = new javax.swing.JLabel();
        feedbackPanel = new javax.swing.JPanel();
        feedbackTypeLabel = new javax.swing.JLabel();
        customerFeedbackRadButton = new javax.swing.JRadioButton();
        customerComplainRadButton = new javax.swing.JRadioButton();
        subjectLabel = new javax.swing.JLabel();
        subjectPane = new javax.swing.JScrollPane();
        subjectArea = new javax.swing.JTextArea();
        issueLabel = new javax.swing.JLabel();
        issueBox = new javax.swing.JComboBox();
        teamLabel = new javax.swing.JLabel();
        teamBox = new javax.swing.JComboBox();
        priorityLabel = new javax.swing.JLabel();
        priorityBox = new javax.swing.JComboBox();
        commentsLabel = new javax.swing.JLabel();
        commentsPane = new javax.swing.JScrollPane();
        commentsArea = new javax.swing.JTextArea();
        statusLabel = new javax.swing.JLabel();
        statusBox = new javax.swing.JComboBox();
        subjectCharLabel = new javax.swing.JLabel();
        commentCharLabel = new javax.swing.JLabel();
        flowPanel = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 51, 51));

        workOrderPane.setBackground(new java.awt.Color(255, 255, 255));

        workOrderPanel.setBackground(new java.awt.Color(0, 51, 51));
        workOrderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Work Order", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        workOrderPanel.setForeground(new java.awt.Color(255, 255, 255));

        companyInfoPanel.setBackground(new java.awt.Color(0, 51, 51));
        companyInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)), "Company Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        companyInfoPanel.setForeground(new java.awt.Color(255, 255, 255));

        companyNameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        companyNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        companyNameLabel.setText("Company Name:");

        companyNameText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        contactLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        contactLabel.setForeground(new java.awt.Color(255, 255, 255));
        contactLabel.setText("Contact Person:");

        contactText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        emailLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(255, 255, 255));
        emailLabel.setText("Email:");

        emailText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        phoneLabel.setBackground(new java.awt.Color(255, 255, 255));
        phoneLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        phoneLabel.setForeground(new java.awt.Color(255, 255, 255));
        phoneLabel.setText("Phone Number:");

        phoneText.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        emailInfoIcon.setForeground(new java.awt.Color(255, 255, 255));
        emailInfoIcon.setText("emailInfo");
        emailInfoIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emailInfoIconMouseClicked(evt);
            }
        });

        phoneInfoIcon.setForeground(new java.awt.Color(255, 255, 255));
        phoneInfoIcon.setText("phoneInfo");
        phoneInfoIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phoneInfoIconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout companyInfoPanelLayout = new javax.swing.GroupLayout(companyInfoPanel);
        companyInfoPanel.setLayout(companyInfoPanelLayout);
        companyInfoPanelLayout.setHorizontalGroup(
            companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(companyInfoPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(contactLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(companyNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(phoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(companyInfoPanelLayout.createSequentialGroup()
                        .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailText, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(phoneText))
                        .addGap(10, 10, 10)
                        .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailInfoIcon)
                            .addComponent(phoneInfoIcon)))
                    .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(contactText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                        .addComponent(companyNameText, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        companyInfoPanelLayout.setVerticalGroup(
            companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, companyInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(companyNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(companyNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactLabel)
                    .addComponent(contactText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailInfoIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(companyInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel)
                    .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneInfoIcon))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        productInfoPanel.setBackground(new java.awt.Color(0, 51, 51));
        productInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)), "Product Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        productNameLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        productNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        productNameLabel.setText("Name:");

        modelNumberLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        modelNumberLabel.setForeground(new java.awt.Color(255, 255, 255));
        modelNumberLabel.setText("Model Number:");

        productNameBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        productNameBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        productNameBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                productNameBoxItemStateChanged(evt);
            }
        });

        modelNumberBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        modelNumberBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        prdInfoIcon.setForeground(new java.awt.Color(255, 255, 255));
        prdInfoIcon.setText("prdInfo");
        prdInfoIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prdInfoIconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout productInfoPanelLayout = new javax.swing.GroupLayout(productInfoPanel);
        productInfoPanel.setLayout(productInfoPanelLayout);
        productInfoPanelLayout.setHorizontalGroup(
            productInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productInfoPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(productInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(productNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(productInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modelNumberBox, 0, 268, Short.MAX_VALUE)
                    .addComponent(productNameBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prdInfoIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        productInfoPanelLayout.setVerticalGroup(
            productInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(productInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productNameLabel)
                    .addComponent(prdInfoIcon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(productInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelNumberBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelNumberLabel))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        feedbackPanel.setBackground(new java.awt.Color(0, 51, 51));
        feedbackPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51), new java.awt.Color(0, 102, 51), new java.awt.Color(0, 153, 51)), "Feedback", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        feedbackTypeLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        feedbackTypeLabel.setForeground(new java.awt.Color(255, 255, 255));
        feedbackTypeLabel.setText("Type of Feedback:");

        customerFeedbackRadButton.setBackground(new java.awt.Color(0, 51, 51));
        customerFeedbackRadButton.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        customerFeedbackRadButton.setForeground(new java.awt.Color(255, 255, 255));
        customerFeedbackRadButton.setText("Customer Feedback");
        customerFeedbackRadButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customerFeedbackRadButtonItemStateChanged(evt);
            }
        });

        customerComplainRadButton.setBackground(new java.awt.Color(0, 51, 51));
        customerComplainRadButton.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        customerComplainRadButton.setForeground(new java.awt.Color(255, 255, 255));
        customerComplainRadButton.setText("Customer Complain");
        customerComplainRadButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customerComplainRadButtonItemStateChanged(evt);
            }
        });

        subjectLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        subjectLabel.setForeground(new java.awt.Color(255, 255, 255));
        subjectLabel.setText("Subject:");

        subjectPane.setBackground(new java.awt.Color(0, 51, 51));

        subjectArea.setColumns(20);
        subjectArea.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        subjectArea.setRows(5);
        subjectPane.setViewportView(subjectArea);

        issueLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        issueLabel.setForeground(new java.awt.Color(255, 255, 255));
        issueLabel.setText("Issue:");

        issueBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        issueBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        issueBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                issueBoxItemStateChanged(evt);
            }
        });

        teamLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        teamLabel.setForeground(new java.awt.Color(255, 255, 255));
        teamLabel.setText("Team Assigned:");

        teamBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        teamBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        priorityLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        priorityLabel.setForeground(new java.awt.Color(255, 255, 255));
        priorityLabel.setText("Priority:");

        priorityBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        priorityBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        commentsLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        commentsLabel.setForeground(new java.awt.Color(255, 255, 255));
        commentsLabel.setText("Comments:");

        commentsArea.setColumns(20);
        commentsArea.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        commentsArea.setRows(5);
        commentsPane.setViewportView(commentsArea);

        statusLabel.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        statusLabel.setForeground(new java.awt.Color(255, 255, 255));
        statusLabel.setText("Status:");

        statusBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        statusBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        subjectCharLabel.setFont(new java.awt.Font("Georgia", 2, 10)); // NOI18N
        subjectCharLabel.setForeground(new java.awt.Color(255, 255, 255));
        subjectCharLabel.setText("jLabel1");

        commentCharLabel.setFont(new java.awt.Font("Georgia", 2, 10)); // NOI18N
        commentCharLabel.setForeground(new java.awt.Color(255, 255, 255));
        commentCharLabel.setText("jLabel1");

        javax.swing.GroupLayout feedbackPanelLayout = new javax.swing.GroupLayout(feedbackPanel);
        feedbackPanel.setLayout(feedbackPanelLayout);
        feedbackPanelLayout.setHorizontalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(commentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(priorityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(teamLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(issueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(subjectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(feedbackTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .addComponent(statusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commentCharLabel)
                    .addComponent(subjectCharLabel)
                    .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(feedbackPanelLayout.createSequentialGroup()
                            .addComponent(customerFeedbackRadButton)
                            .addGap(18, 18, 18)
                            .addComponent(customerComplainRadButton))
                        .addComponent(subjectPane)
                        .addComponent(priorityBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(teamBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(commentsPane)
                        .addComponent(statusBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(issueBox, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        feedbackPanelLayout.setVerticalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feedbackTypeLabel)
                    .addComponent(customerFeedbackRadButton)
                    .addComponent(customerComplainRadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subjectLabel)
                    .addComponent(subjectPane, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subjectCharLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(issueBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(issueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priorityLabel))
                .addGap(18, 18, 18)
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commentsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(commentsLabel))
                .addGap(4, 4, 4)
                .addComponent(commentCharLabel)
                .addGap(18, 18, 18)
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout workOrderPanelLayout = new javax.swing.GroupLayout(workOrderPanel);
        workOrderPanel.setLayout(workOrderPanelLayout);
        workOrderPanelLayout.setHorizontalGroup(
            workOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(productInfoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(feedbackPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(companyInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2))
        );
        workOrderPanelLayout.setVerticalGroup(
            workOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workOrderPanelLayout.createSequentialGroup()
                .addComponent(companyInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(feedbackPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        workOrderPane.setViewportView(workOrderPanel);

        flowPanel.setBackground(new java.awt.Color(0, 51, 51));

        submitButton.setBackground(new java.awt.Color(0, 102, 0));
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText("SUBMIT");
        submitButton.setToolTipText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(0, 102, 0));
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("CANCEL");
        cancelButton.setToolTipText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout flowPanelLayout = new javax.swing.GroupLayout(flowPanel);
        flowPanel.setLayout(flowPanelLayout);
        flowPanelLayout.setHorizontalGroup(
            flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flowPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        flowPanelLayout.setVerticalGroup(
            flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flowPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(workOrderPane, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                    .addComponent(flowPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(workOrderPane, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // </editor-fold>
    // <editor-fold desc="Events">
    /**
     * Cancel button action event.
     *
     * @param evt Action event
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        JDesktopPane desktopPane = this.getDesktopPane();
        if (desktopPane != null) {
            if (this.isUpdate) {
                control.addFrameToPane(desktopPane, "UpdateWorkOrderScreen");
            } else {
                control.addFrameToPane(desktopPane, "MainMenuScreen");
            }

            this.dispose();
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Submit button action event.
     *
     * @param evt Action event
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String errorMessage = validateInputs();
        if (errorMessage.isEmpty()) {
            isProductSelected = false;
            Feedback feedbackInfo = getFeedbackInformation();
            JDesktopPane desktopPane = this.getDesktopPane();
            if (desktopPane != null) {
                if (this.isUpdate) {
                    CustomComboItem statusItem = (CustomComboItem) statusBox.getSelectedItem();
                    if (statusItem != null) {
                        Status statusInfo = new Status();
                        statusInfo.setStatusId(statusItem.getValue());
                        statusInfo.setStatusDescription(statusItem.getKey());
                        feedbackInfo.setStatus(statusInfo);
                    }
                    feedbackInfo.setFeedbackId(this.updateId);
                    User endUser = LoginScreen.getUserDetails();
                    if (endUser != null) {
                        feedbackInfo.setUser(endUser);
                    }
                    long referenceNumber;
                    try {
                        referenceNumber = control.submitFeedback(feedbackInfo);
                        if (referenceNumber > 0) {
                            JOptionPane.showMessageDialog(this, "Work order updated successfully!!", "RoC Information", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Work order update failed! \nTry again later..", "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (RocException ex) {
                        Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                    control.addFrameToPane(desktopPane, "UpdateWorkOrderScreen");
                } else {
                    control.moveToOrderConfirmation(desktopPane, feedbackInfo);
                }

                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, errorMessage, "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * Product box item state changed event.
     *
     * @param evt Item event
     */
    private void productNameBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_productNameBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            isProductSelected = true;
            CustomComboItem item = (CustomComboItem) productNameBox.getSelectedItem();
            if (item != null) {
                Product productInfo = new Product(item.getValue(), item.getKey(), null, null);
                List<Model> modelCollection;
                try {
                    modelCollection = control.getModelCollectionByProduct(productInfo);
                    if (modelCollection != null && !modelCollection.isEmpty()) {
                        modelNumberBox.removeAllItems();
                        modelNumberBox.setEnabled(true);
                        modelCollection.stream().forEach((modelInfo) -> {
                            modelNumberBox.addItem(new CustomComboItem(modelInfo.getModelDescription() + " - " + modelInfo.getModelNumber(), modelInfo.getModelId()));
                        });
                    }
                } catch (RocException ex) {
                    Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_productNameBoxItemStateChanged

    /**
     * Customer complain button item state change event.
     *
     * @param evt Item event
     */
    private void customerComplainRadButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customerComplainRadButtonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                issueBox.setEnabled(true);
                control.populateDropDown(issueBox, "IssueBox");
                priorityBox.setEnabled(true);
                control.populateDropDown(priorityBox, "PriorityBox");
            } catch (RocException ex) {
                Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_customerComplainRadButtonItemStateChanged

    /**
     * Customer feedback button item state change event.
     *
     * @param evt Item event
     */
    private void customerFeedbackRadButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customerFeedbackRadButtonItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            issueBox.setEnabled(false);
            issueBox.removeAllItems();
            teamBox.setEnabled(false);
            teamBox.removeAllItems();
            priorityBox.setEnabled(false);
            priorityBox.removeAllItems();
        }
    }//GEN-LAST:event_customerFeedbackRadButtonItemStateChanged

    /**
     * Issue box item state change event.
     *
     * @param evt Item event
     */
    private void issueBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_issueBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            CustomComboItem item = (CustomComboItem) issueBox.getSelectedItem();
            if (item != null) {
                Issue issueInfo = new Issue(item.getValue(), item.getKey(), null, null);
                List<ResolvingTeam> teamCollection;
                try {
                    teamCollection = control.getTeamCollectionByIssue(issueInfo);
                    if (teamCollection != null && !teamCollection.isEmpty()) {
                        teamBox.removeAllItems();
                        teamBox.setEnabled(true);
                        teamCollection.stream().forEach((teamInfo) -> {
                            teamBox.addItem(new CustomComboItem(teamInfo.getTeamDescription(), teamInfo.getTeamId()));
                        });
                    }
                } catch (RocException ex) {
                    Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_issueBoxItemStateChanged

    /**
     * Email information icon mouse click event.
     *
     * @param evt Mouse event
     */
    private void emailInfoIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailInfoIconMouseClicked
        JOptionPane.showMessageDialog(this,
                "Help Regarding Email:\nEnter Valid Email like <emailaddress>@<mail-domain>.com\nExample: rochelp@gmail.com",
                "RoC Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_emailInfoIconMouseClicked

    /**
     * Phone information icon mouse click event.
     *
     * @param evt Mouse event
     */
    private void phoneInfoIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneInfoIconMouseClicked
        JOptionPane.showMessageDialog(this,
                "Help Regarding Phone number:\nEnter Valid Mobile phone number only with optional country code.\nExample: +49-187-589-99999",
                "RoC Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_phoneInfoIconMouseClicked

    /**
     * Product information icon mouse click event.
     *
     * @param evt Mouse event
     */
    private void prdInfoIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prdInfoIconMouseClicked
        CustomComboItem item = (CustomComboItem) productNameBox.getSelectedItem();
        if (item != null) {
            Product productInfo = new Product(item.getValue(), item.getKey(), null, null);
            String imagePath = "";
            switch (productInfo.getProductId()) {
                case 1:
                    imagePath = "images/PickAndPlace.jpg";
                    break;

                case 2:
                    imagePath = "images/LineFollower.jpg";
                    break;

                case 3:
                    imagePath = "images/WeldingRobot.jpg";
                    break;
            }

            if (!imagePath.isEmpty()) {
                ImageIcon infoIcon = getImage(imagePath, 500, 500);
                if (infoIcon != null) {
                    JOptionPane.showMessageDialog(this, "", "RoC Information", JOptionPane.INFORMATION_MESSAGE, infoIcon);
                }
            }
        }
    }//GEN-LAST:event_prdInfoIconMouseClicked

    // </editor-fold>
    // <editor-fold desc="Private Methods">
    /**
     * Method to remove unnecessary decoration from internal frame.
     */
    private void frameDecorationRemoval() {
        control.removeInternalFrameDecoration(this);
    }

    /**
     * Method to initialize components.
     */
    private void loadWorkOrderConponents() {
        try {
            control.populateDropDown(productNameBox, "ProductBox");
            List<Product> productList = control.getProductCollection();
            if (productList != null && !productList.isEmpty()) {
                Product productItem = productList.get(0);
                if (productItem != null) {
                    isProductSelected = true;
                    productNameBox.setSelectedItem(new CustomComboItem(productItem.getProductName(), productItem.getProductId()));
                    List<Model> modelCollection = control.getModelCollectionByProduct(productItem);
                    if (modelCollection != null && !modelCollection.isEmpty()) {
                        modelNumberBox.removeAllItems();
                        modelNumberBox.setEnabled(true);
                        modelCollection.stream().forEach((modelInfo) -> {
                            modelNumberBox.addItem(new CustomComboItem(modelInfo.getModelDescription() + " - " + modelInfo.getModelNumber(), modelInfo.getModelId()));
                        });
                    }
                }
            }
        } catch (RocException ex) {
            Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }

        issueBox.setEnabled(false);
        issueBox.removeAllItems();
        teamBox.setEnabled(false);
        teamBox.removeAllItems();
        priorityBox.setEnabled(false);
        priorityBox.removeAllItems();

        ButtonGroup feedbackGroup = new ButtonGroup();
        feedbackGroup.add(customerComplainRadButton);
        feedbackGroup.add(customerFeedbackRadButton);
        customerFeedbackRadButton.setSelected(true);

        isUpdate = false;
        statusLabel.setVisible(false);
        statusBox.setVisible(false);        

        // Set the image for info icon        
        ImageIcon infoIcon = getImage("images/info.png", 20, 20);
        if (infoIcon != null) {
            emailInfoIcon.setIcon(infoIcon);
            emailInfoIcon.setText("");
            phoneInfoIcon.setIcon(infoIcon);
            phoneInfoIcon.setText("");
            prdInfoIcon.setIcon(infoIcon);
            prdInfoIcon.setText("");
        }

        // Set the limit for characters in text area
        setDocumentForCharLimit(subjectArea, new DefaultStyledDocument(), 80, subjectCharLabel);
        setDocumentForCharLimit(commentsArea, new DefaultStyledDocument(), 500, commentCharLabel);
    }

    /**
     * Method to collect feedback information.
     *
     * @return Feedback details
     * @throws NumberFormatException
     */
    private Feedback getFeedbackInformation() throws NumberFormatException {
        Feedback feedbackInfo = null;
        try {
            feedbackInfo = new Feedback();
            Customer customerInfo = new Customer();
            customerInfo.setCustomerName(companyNameText.getText().trim());
            customerInfo.setContactPerson(contactText.getText().trim());
            customerInfo.setEmailId(emailText.getText().trim());
            customerInfo.setPhoneNumber(Long.parseLong(phoneText.getText().trim()));
            if (this.isUpdate) {
                customerInfo.setCustomerId(this.updateCustomerId);
            }
            feedbackInfo.setCustomer(customerInfo);
            CustomComboItem productItem = (CustomComboItem) productNameBox.getSelectedItem();
            if (productItem != null) {
                Product productInfo = new Product();
                productInfo.setProductId(productItem.getValue());
                productInfo.setProductName(productItem.getKey());
                Model modelInfo = new Model();
                modelInfo.setProduct(productInfo);
                CustomComboItem modelItem = (CustomComboItem) modelNumberBox.getSelectedItem();
                if (modelItem != null) {
                    modelInfo.setModelId(modelItem.getValue());
                    String[] model = modelItem.getKey().split("-");
                    if (model != null && model.length == 2 && !(model[0].trim().isEmpty()) && !(model[1].trim().isEmpty())) {
                        modelInfo.setModelDescription(model[0].trim());
                        modelInfo.setModelNumber(model[1].trim());
                    }
                }

                feedbackInfo.setModel(modelInfo);
            }
            feedbackInfo.setSubject(subjectArea.getText().trim());
            feedbackInfo.setComments(commentsArea.getText().trim());
            feedbackInfo.setFeedbackDate(new Date());
            if (customerComplainRadButton.isSelected()) {
                CustomComboItem issueItem = (CustomComboItem) issueBox.getSelectedItem();
                if (issueItem != null) {
                    Issue issueInfo = new Issue();
                    issueInfo.setIssueId(issueItem.getValue());
                    issueInfo.setIssueName(issueItem.getKey());
                    feedbackInfo.setIssue(issueInfo);
                }

                CustomComboItem priorityItem = (CustomComboItem) priorityBox.getSelectedItem();
                if (priorityItem != null) {
                    Priority priorityInfo = new Priority();
                    priorityInfo.setPriorityId(priorityItem.getValue());
                    priorityInfo.setPriorityName(priorityItem.getKey());
                    feedbackInfo.setPriority(priorityInfo);
                }

                CustomComboItem teamItem = (CustomComboItem) teamBox.getSelectedItem();
                if (teamItem != null) {
                    ResolvingTeam teamInfo = new ResolvingTeam();
                    teamInfo.setTeamId(teamItem.getValue());
                    teamInfo.setTeamDescription(teamItem.getKey());
                    feedbackInfo.setResolvingTeam(teamInfo);
                }

                feedbackInfo.setFeedbackType(0);
            } else {
                feedbackInfo.setFeedbackType(1);

                Issue issueInfo = new Issue();
                issueInfo.setIssueId(6);
                issueInfo.setIssueName("Statistical Data");
                feedbackInfo.setIssue(issueInfo);

                Priority priorityInfo = new Priority();
                priorityInfo.setPriorityId(1);
                priorityInfo.setPriorityName("Low");
                feedbackInfo.setPriority(priorityInfo);

                ResolvingTeam teamInfo = new ResolvingTeam();
                teamInfo.setTeamId(6);
                teamInfo.setTeamDescription("Statistical Team");
                feedbackInfo.setResolvingTeam(teamInfo);
            }
        } catch (NumberFormatException ex) {
            Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }

        return feedbackInfo;
    }

    /**
     * Method to verify the inputs from work order form.
     *
     * @return Error message depending upon the validity of the inputs
     */
    private String validateInputs() {
        // Verify inputs from work order form
        String errorMessage = companyNameText.getText().trim().isEmpty() ? "Please enter Company Name !!\n" : "";
        errorMessage += contactText.getText().trim().isEmpty() ? "Please enter Contact Person Details !!\n" : "";
        String emailInfo = emailText.getText().trim();
        errorMessage += emailInfo.isEmpty() ? "Please enter Email details !!\n" : "";
        errorMessage += (!emailInfo.isEmpty() && !control.verifyInput(emailInfo, "Email")) ? "Please enter VALID Email address !!\n" : "";
        String phoneInfo = phoneText.getText().trim();
        errorMessage += phoneInfo.isEmpty() ? "Please enter Phone number !!\n" : "";
        errorMessage += (!phoneInfo.isEmpty() && !control.verifyInput(phoneInfo, "Phone")) ? "Please enter VALID Phone number !!\n" : "";
        errorMessage += subjectArea.getText().trim().isEmpty() ? "Please enter Subject details !!\n" : "";
        errorMessage += commentsArea.getText().trim().isEmpty() ? "Please enter Comments !!\n" : "";
        errorMessage += !isProductSelected ? "Please select Product and respective Model to proceed with order !!\n" : "";
        return errorMessage;
    }

    /**
     * Method to set limit for text area in work order form.
     *
     * @param textArea The text area to which limit is set
     * @param document Document to specify the limit
     * @param charCount Limit of characters
     * @param label Label to display the limit
     */
    private void setDocumentForCharLimit(JTextArea textArea, DefaultStyledDocument document, int charCount, JLabel label) {
        if (document != null && charCount > 0 && textArea != null && label != null) {
            document.setDocumentFilter(new DocumentSizeFilter(charCount));
            document.addDocumentListener(new DocumentListener() {

                @Override
                public void insertUpdate(DocumentEvent de) {
                    updateCount(label, document, charCount);
                }

                @Override
                public void removeUpdate(DocumentEvent de) {
                    updateCount(label, document, charCount);
                }

                @Override
                public void changedUpdate(DocumentEvent de) {
                    updateCount(label, document, charCount);
                }
            });
            textArea.setDocument(document);
            textArea.setWrapStyleWord(true);
            textArea.setLineWrap(true);
            updateCount(label, document, charCount);
        }
    }

    /**
     * Method to update the count of characters limited in text area.
     *
     * @param label Label to display the limit
     * @param document Document to specify the limit
     * @param charCount Limit of characters
     */
    private void updateCount(JLabel label, DefaultStyledDocument document, int charCount) {
        label.setText((charCount - document.getLength()) + " characters remaining");
    }

    /**
     * Method to get image icon with scaling.
     *
     * @param imagePath Path of the image to be recovered
     * @param width Scaling width
     * @param height Scaling height
     * @return Image icon
     */
    private ImageIcon getImage(String imagePath, int width, int height) {
        BufferedImage image = null;
        ImageIcon icon = null;
        try {
            if (!imagePath.isEmpty()) {
                image = ImageIO.read(new File(imagePath));
            }
        } catch (IOException ex) {
            Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
        if (image != null) {
            icon = new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_SMOOTH));
        }

        return icon;
    }
    // </editor-fold>

    // <editor-fold desc="Public Methods">
    /**
     * Method to fill feedback details.
     *
     * @param order Feedback details
     */
    public void populateEditOrderDetails(Feedback order) {
        Customer customerInfo = order.getCustomer();
        companyNameText.setText(customerInfo.getCustomerName());
        contactText.setText(customerInfo.getContactPerson());
        emailText.setText(customerInfo.getEmailId());
        phoneText.setText(String.valueOf(customerInfo.getPhoneNumber()));

        Model modelInfo = order.getModel();
        productNameBox.setSelectedItem(new CustomComboItem(modelInfo.getProduct().getProductName(), modelInfo.getProduct().getProductId()));
        modelNumberBox.setSelectedItem(new CustomComboItem(modelInfo.getModelDescription() + " - " + modelInfo.getModelNumber(), modelInfo.getModelId()));

        subjectArea.setText(order.getSubject());
        commentsArea.setText(order.getComments());

        if (Long.compare(order.getFeedbackType(), 0) == 0) {
            customerComplainRadButton.setSelected(true);
            issueBox.setSelectedItem(new CustomComboItem(order.getIssue().getIssueName(), order.getIssue().getIssueId()));
            teamBox.setSelectedItem(new CustomComboItem(order.getResolvingTeam().getTeamDescription(), order.getResolvingTeam().getTeamId()));
            priorityBox.setSelectedItem(new CustomComboItem(order.getPriority().getPriorityName(), order.getPriority().getPriorityId()));
        } else {
            customerFeedbackRadButton.setSelected(true);
        }

        if (this.isUpdate) {
            this.updateId = order.getFeedbackId();
            this.updateCustomerId = order.getCustomer().getCustomerId();
            statusBox.setSelectedItem(new CustomComboItem(order.getStatus().getStatusDescription(), order.getStatus().getStatusId()));
        }
    }

    /**
     * Method to set frame for use of update.
     *
     * @param isUpdate Update activation flag
     */
    public void setUpdate(boolean isUpdate) {
        this.isUpdate = isUpdate;
        submitButton.setText("CONFIRM");
        submitButton.setToolTipText("Confirm");
        try {
            statusLabel.setVisible(true);
            statusBox.setVisible(true);
            control.populateDropDown(statusBox, "StatusBox");
        } catch (RocException ex) {
            Logger.getLogger(WorkOrderScreen.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "RoC Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }
    // </editor-fold>

    private boolean isProductSelected;
    private boolean isUpdate;
    private long updateId;
    private int updateCustomerId;
    private final MainController control;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel commentCharLabel;
    private javax.swing.JTextArea commentsArea;
    private javax.swing.JLabel commentsLabel;
    private javax.swing.JScrollPane commentsPane;
    private javax.swing.JPanel companyInfoPanel;
    private javax.swing.JLabel companyNameLabel;
    private javax.swing.JTextField companyNameText;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JTextField contactText;
    private javax.swing.JRadioButton customerComplainRadButton;
    private javax.swing.JRadioButton customerFeedbackRadButton;
    private javax.swing.JLabel emailInfoIcon;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailText;
    private javax.swing.JPanel feedbackPanel;
    private javax.swing.JLabel feedbackTypeLabel;
    private javax.swing.JPanel flowPanel;
    private javax.swing.JComboBox issueBox;
    private javax.swing.JLabel issueLabel;
    private javax.swing.JComboBox modelNumberBox;
    private javax.swing.JLabel modelNumberLabel;
    private javax.swing.JLabel phoneInfoIcon;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneText;
    private javax.swing.JLabel prdInfoIcon;
    private javax.swing.JComboBox priorityBox;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JPanel productInfoPanel;
    private javax.swing.JComboBox productNameBox;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JComboBox statusBox;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextArea subjectArea;
    private javax.swing.JLabel subjectCharLabel;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JScrollPane subjectPane;
    private javax.swing.JButton submitButton;
    private javax.swing.JComboBox teamBox;
    private javax.swing.JLabel teamLabel;
    private javax.swing.JScrollPane workOrderPane;
    private javax.swing.JPanel workOrderPanel;
    // End of variables declaration//GEN-END:variables
}
